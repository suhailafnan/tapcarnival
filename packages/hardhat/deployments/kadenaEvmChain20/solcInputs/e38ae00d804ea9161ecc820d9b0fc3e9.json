{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/TapKarnival.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract TapKarnival is Ownable {\r\n    event GamePlayed(address indexed player, uint256 score, uint256 timestamp);\r\n    event NewHighScore(address indexed player, uint256 score);\r\n    event EntryFeeUpdated(uint256 fee);\r\n    event FeesWithdrawn(address indexed to, uint256 amount);\r\n    event PrizeClaimed(address indexed winner, uint256 amount);\r\n\r\n    uint256 public entryFee;            // e.g., 0.01 ether on Kadena EVM [web:506]\r\n    uint256 public feesAccrued;         // 4% commission accumulated [web:500]\r\n    uint256 public prizePool;           // 96% prize pool [web:500]\r\n\r\n    // Simple best-score leaderboard\r\n    mapping(address => uint256) public bestScore;\r\n    address public currentLeader;\r\n    uint256 public currentTopScore;\r\n\r\n    constructor(uint256 _entryFee, address initialOwner) Ownable(initialOwner) {\r\n        entryFee = _entryFee;\r\n    }\r\n\r\n    function setEntryFee(uint256 _fee) external onlyOwner {\r\n        entryFee = _fee;\r\n        emit EntryFeeUpdated(_fee);\r\n    }\r\n\r\n    function playGame(uint256 score) external payable {\r\n        require(msg.value >= entryFee, \"Entry fee required\");                          // [web:506]\r\n        // split 4% fee / 96% prize\r\n        uint256 feeCut = (msg.value * 4) / 100;                                        // 4% [web:500]\r\n        uint256 toPrize = msg.value - feeCut;\r\n        feesAccrued += feeCut;\r\n        prizePool += toPrize;\r\n\r\n        emit GamePlayed(msg.sender, score, block.timestamp);\r\n\r\n        // update personal best & leader\r\n        if (score > bestScore[msg.sender]) {\r\n            bestScore[msg.sender] = score;\r\n            emit NewHighScore(msg.sender, score);\r\n        }\r\n        if (score > currentTopScore) {\r\n            currentTopScore = score;\r\n            currentLeader = msg.sender;\r\n        }\r\n    }\r\n\r\n    // Winner pulls prize; resets pool and top score for next round.\r\n    function claimPrize() external {\r\n        require(msg.sender == currentLeader && currentTopScore > 0, \"Not leader\");\r\n        uint256 amount = prizePool;\r\n        require(amount > 0, \"No prize\");\r\n        // effects\r\n        prizePool = 0;\r\n        currentTopScore = 0;\r\n        currentLeader = address(0);\r\n        // interactions\r\n        (bool ok, ) = msg.sender.call{value: amount}(\"\");\r\n        require(ok, \"Prize transfer failed\");                                         // [web:500]\r\n        emit PrizeClaimed(msg.sender, amount);\r\n    }\r\n\r\n    // Owner withdraws collected fees using pull-like explicit action.\r\n    function withdrawFees(address payable to) external onlyOwner {\r\n        uint256 amount = feesAccrued;\r\n        require(amount > 0, \"No fees\");\r\n        feesAccrued = 0;\r\n        (bool ok, ) = to.call{value: amount}(\"\");\r\n        require(ok, \"Fee transfer failed\");                                           // [web:500]\r\n        emit FeesWithdrawn(to, amount);\r\n    }\r\n\r\n    // Views to help the frontend\r\n    function getLeader() external view returns (address leader, uint256 topScore, uint256 pool) {\r\n        return (currentLeader, currentTopScore, prizePool);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}